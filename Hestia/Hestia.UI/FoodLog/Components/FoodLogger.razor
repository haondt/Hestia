@using Hestia.Domain.Models
@using Hestia.Domain.Services
@using Hestia.UI.Core.Components
@using Hestia.UI.MealPlans.Components
@inject IMealPlansService MealPlansService

@code {
    [Parameter, EditorRequired]
    public required string DateString { get; set; }

    [Parameter, EditorRequired]
    public required FoodLogModel FoodLog { get; set; }
}


<div class="meal-planner food-logger"
    _="
        on dirty debounced at 150ms 
            repeat for section in <.meal-plan-section-container /> index sectionIdx
                set sectionInput to the first <.meal-plan-section-title-input/> in section
                set sectionInput.name to window.stringUtils.fillTemplate(sectionInput.name, [sectionIdx])
                repeat for item in <.meal-plan-item/> in section index itemIdx
                    set inputs to <input[form='meal-planner-form']/> in item
                    repeat for input in inputs
                        set input.name to window.stringUtils.fillTemplate(input.name, [sectionIdx, itemIdx])
                    end
                end
            end
            send submit to #meal-planner-form
        end
        on removeme
            remove the event's detail.target
            send dirty to me
        end
    "
>
    <form
        id="meal-planner-form"
        hx-put="/food-logs/food-log/@DateString"
        hx-swap="none"
        _="
            on htmx:beforeRequest
                add .is-hidden to #save-success-indicator
                add .is-hidden to #save-fail-indicator
                remove .is-hidden from #in-flight-indicator
            end
            on htmx:afterRequest
                add .is-hidden to #in-flight-indicator
                if event.detail.xhr.status is 200
                    remove .is-hidden from #save-success-indicator
                else
                    remove .is-hidden from #save-fail-indicator
                end
            end
        "
    >
    <input type="hidden" name="@nameof(FoodLogModel.DateString)" value="@DateString"/>
</form>

    <!-- Basic meal plan info -->
    <div class="field mb-3 is-flex is-align-items-center">
        <div class="mr-2">
            <EmbeddedMealPlan EmitDirty="false" MealPlanId="@FoodLog.MealPlanId" />
        </div>
        <span class="is-flex-grow-1"></span>
        <span id="save-success-indicator" class="icon mr-2 has-text-success is-hidden">
            <LucideIcon Name="check"/>
        </span>
        <span id="save-fail-indicator" class="icon mr-2 has-text-danger is-hidden">
            <LucideIcon Name="cloud-alert" />
        </span>

        <div id="in-flight-indicator" class="control is-hidden is-flex-shrink-0 is-loading just-spinner mr-2" style="width:24px;"></div>
        <Tooltip Position="Tooltip.TooltipPosition.TopEnd" >
            <TriggerContent>
                <div class="is-flex is-align-items-center">
                    <span class="icon">
                        <LucideIcon CssClass="has-text-grey" Name="info"/>
                    </span>
                </div>
            </TriggerContent>
            <TooltipContent>
                <div class="card p-3 content">
                    <p>
                        <span>Changes to this form will save automatically.</span>
                        <span class="is-flex is-flex-wrap-wrap gap-2" >
                            <span class="control is-loading just-spinner"></span> 
                            <span>indicates a request is currently in flight.</span>
                        </span>
                    </p>
                </div>
            </TooltipContent>
        </Tooltip>

    </div>

    <!-- Meal plan content -->
    <div id="food-log-content" class="meal-plan-content"
        _="
            on load[event.target==me]
                js(me)
                    return new Sortable(me, {
                        animation: 100,
                        ghostClass: 'sortable-ghost',
                        chosenClass: 'sortable-chosen',
                        dragClass: 'sortable-drag',
                        handle: '.drag-container',
                        onEnd: e => {
                            me.dispatchEvent(new Event('dirty', { bubbles: true }));
                        }
                    });
                end
                set :sortable to it
            end

            on destroy[event.target==me]
                set sortable to :sortable
                js(sortable)
                    if (sortable) {
                        sortable.destroy();
                    }
                end
                remove me
            end

            on htmx:beforeCleanupElement[event.target==me]
                send destroy to me
            end
        ">
        @foreach (var mealPart in FoodLog.Sections)
        {
            <MealPlanSectionContainer EmitDirtyOnLoad="false" Name="mealPart.Name" >
                @foreach (var item in mealPart.Items)
                {
                    <MealPlanItem EmitDirtyOnLoad="false" Entity="item" Id="item.RecipeOrIngredientId" />
                }

            </MealPlanSectionContainer>
        }
    </div>

    <!-- Add meal part button -->
    <div class="has-text-centered my-3">
        <p
            class="is-clickable has-text-grey"
            hx-get="/meal-plans/fragments/section-container"
            hx-target="#food-log-content"
            hx-swap="beforeend">
            Add Section
        </p>
    </div>
</div>
