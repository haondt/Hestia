@using Hestia.Domain.Models
@using Haondt.Core.Extensions
@using Hestia.Persistence.Models
@using Hestia.UI.Core.Components

@attribute [RenderPage]
<div _="on load send OnNavigate(value:'NoNavigation') to #navbar then remove me"></div>

@code {
    [Parameter]
    public Optional<RecipeModel> Recipe { get; set; }

    [Parameter]
    public Optional<int> RecipeId { get; set; }

    private string _target = default!;
    private Dictionary<string, object> _formAttributes = new();
    private int _groupId;

    protected override void OnInitialized()
    {
        _target = RecipeId.Map(r => $"/recipes/edit/{r}").Or("/recipes/new");
        _groupId = Recipe.Map(r => r.Ingredients.Count).Or(0);

        if (RecipeId.HasValue)
        {
            _formAttributes["hx-put"] = _target;
        }
        else
        {
            _formAttributes["hx-post"] = _target;
        }

        base.OnInitialized();
    }

}

<div class="content-container mt-5">
    <div class="page-header">
        <p>@Recipe.Map(_ => "Edit").Or("New") recipe</p>
    </div>
    <form id="edit-recipe-add-ingredient-form" 
        hx-get="/recipes/add-ingredient"
        hx-target="#ingredients-list > .column"
        hx-swap="afterbegin"
        hx-rename="search:@(nameof(RecipeIngredientModel.Name))"
        _="
            on htmx:afterRequest 
                if the event's detail.successful is true then 
                    reset() me
                    increment the #group-id's value
                end
           ">
        <input id="group-id" name="groupId" type="hidden" value="@_groupId" />
    </form>
    <form
        hx-trigger="finalSubmit"
        id="edit-recipe-form" class="control" hx-swap="none" hx-encoding="multipart/form-data" @attributes="_formAttributes"
        _="
            on submit
                halt the event
                set id to 0
                for i in (<.recipe-ingredients-list-item/> in #ingredients-list)
                    for input in (<input/> in i)
                        set name to input's name
                        if name contains '[' then
                            set baseName to name.split('[')[0]
                            set suffix to name.split('].')[1] or ''
                            if suffix is not '' then
                                set input's name to baseName + '[' + id + '].' + suffix
                            else
                                set input's name to baseName + '[' + id + ']'
                            end
                        end
                    end
                    increment id
                end
                send finalSubmit to me
            end 
        "
        >

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Title</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(RecipeModel.Title)" type="text" value="@Recipe.Map(q => q.Title).Unwrap()" required />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Description</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <textarea class="textarea" name="@nameof(RecipeModel.Description)" type="text" value="@Recipe.Bind(q => q.Description).Unwrap()" />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Prep Time</label>
            </div>
            <div class="field-body">
                <div class="field has-addons is-flex-grow-0">
                    <div class="control">
                        <input 
                            class="input unit-input"
                            name="@nameof(RecipeModel.PrepTimeQuantity)"
                            type="number"
                            value="@Recipe.Bind(r => r.PrepTimeQuantity).Unwrap()"
                            placeholder="30"
                            min="0"
                            step="0.1" />
                    </div>
                    <div class="control">
                        <div class="select">
                            <select name="@nameof(RecipeModel.PrepTimeUnit)">
                                @foreach(var unit in new List<string> { RecipeTimeUnit.Minutes, RecipeTimeUnit.Hours })
                                {
                                    if (Recipe.Bind(r => r.PrepTimeUnit).TryGetValue(out var fieldUnit) && fieldUnit == unit)
                                    {
                                        <option value="@unit" selected>@unit</option>
                                    }
                                    else
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Cook Time</label>
            </div>
            <div class="field-body">
                <div class="field has-addons is-flex-grow-0">
                    <div class="control">
                        <input 
                            class="input unit-input"
                            name="@nameof(RecipeModel.CookTimeQuantity)"
                            type="number"
                            value="@Recipe.Bind(r => r.CookTimeQuantity).Unwrap()"
                            placeholder="45"
                            min="0"
                            step="0.1" />
                    </div>
                    <div class="control">
                        <div class="select">
                            <select name="@nameof(RecipeModel.CookTimeUnit)">
                                @foreach(var unit in new List<string> { RecipeTimeUnit.Minutes, RecipeTimeUnit.Hours })
                                {
                                    if (Recipe.Bind(r => r.CookTimeUnit).TryGetValue(out var fieldUnit) && fieldUnit == unit)
                                    {
                                        <option value="@unit" selected>@unit</option>
                                    }
                                    else
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Yield</label>
            </div>
            <div class="field-body">
                <div class="field has-addons is-flex-grow-0">
                    <div class="control">
                        <input 
                            id="yield-quantity-input"
                            class="input" 
                            name="@nameof(RecipeModel.YieldQuantity)" 
                            type="number" 
                            placeholder="4" 
                            value="@Recipe.Bind(r => r.YieldQuantity).Unwrap()"
                            step="any"
                            _="on input send calculateServingSize to #serving-size-field">
                    </div>
                    <div class="control">
                        <input 
                            id="yield-unit-input"
                            class="input unit-input" 
                            name="@nameof(RecipeModel.YieldUnit)" 
                            type="text" 
                            placeholder="cup"
                            value="@Recipe.Bind(r => r.YieldUnit).Unwrap()"
                            _="on input send calculateServingSize to #serving-size-field">
                    </div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Number of servings</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input 
                        id="servings-number-input"
                        class="input servings-input" 
                        name="@nameof(RecipeModel.NumberOfServings)" 
                        type="number" 
                        placeholder="4" 
                        value="@Recipe.Bind(r => r.NumberOfServings).Unwrap()"
                        min="1"
                        _="on input send calculateServingSize to #serving-size-field">
                </div>
            </div>
        </div>

        <div class="field is-horizontal" id="serving-size-field"
            _="
                on load send calculateServingSize to me end
                on calculateServingSize
                    halt the event
                    set yieldQuantity to #yield-quantity-input's value as a Number
                    set yieldUnit to #yield-unit-input's value
                    set numberOfServings to #servings-number-input's value as a Number
                    if yieldQuantity > 0 and yieldUnit is not '' and numberOfServings > 0 then
                        set servingSize to yieldQuantity / numberOfServings
                        set #serving-size-quantity's value to servingSize
                        set #serving-size-unit's value to yieldUnit
                    else
                        set #serving-size-quantity's value to ''
                        set #serving-size-unit's value to ''
                    end
                end
            ">
            <div class="field-label is-normal">
                <label class="label">Serving size</label>
            </div>
            <div class="field-body">
                <div class="field has-addons is-flex-grow-0">
                    <div class="control">
                        <input 
                            class="input is-static-input" 
                            id="serving-size-quantity"
                            type="number" 
                            placeholder="1" 
                            step="any"
                            readonly>
                    </div>
                    <div class="control">
                        <input 
                            class="input is-static-input unit-input" 
                            id="serving-size-unit"
                            type="text" 
                            placeholder="cup"
                            readonly>
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Ingredients</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <div class="mb-4">

                        <!-- Desktop Layout -->
                        <div class="field has-addons is-hidden-mobile">
                            <div class="control">
                                <input 
                                    form="edit-recipe-add-ingredient-form"
                                    name="@nameof(RecipeIngredientModel.Quantity)"
                                    class="input unit-input" 
                                    type="number" 
                                    placeholder="1" 
                                    step="any">
                            </div>
                            <div class="control">
                                <input 
                                    _="on change set <#ingredients-list-item-template input[name='unit'] />'s value to my value"
                                    form="edit-recipe-add-ingredient-form"
                                    class="input unit-input" 
                                    type="text" 
                                    placeholder="cup" 
                                    name="@nameof(RecipeIngredientModel.Unit)">
                            </div>
                            <div class="control is-expanded"
                                _="on ingredientChanged
                                    halt the event
        
                                    if the event's detail.value is ''
                                    and the event's detail.text is not ''
                                        remove .is-hidden from the first .lucide in me
                                    else
                                        add .is-hidden to the first .lucide in me
                                    end
                                end
                                ">
                                <Autocomplete 
                                    ValueName="@(nameof(RecipeIngredientModel.IngredientId))"
                                    Form="@("edit-recipe-add-ingredient-form")"
                                    Name="@("search")"
                                    Id="@("ingredient-search")"
                                    Placeholder="@("Flour")"
                                    SuggestionUri="@("/recipes/search-ingredients")"
                                    ChangedEvent="@("ingredientChanged")">
                                    <Icon>
                                        <LucideIcon CssClass="has-text-info is-hidden" Name="asterisk" Size="20" />
                                    </Icon>
                                </Autocomplete>
                            </div>
                            <div class="control">
                                <input 
                                    type="submit"
                                    form="edit-recipe-add-ingredient-form"
                                    class="button is-primary" 
                                     value="Add"/>
                            </div>
                            <Tooltip Position="Tooltip.TooltipPosition.TopEnd" >
                                <TriggerContent>
                                    <div class="is-flex is-align-items-center has-height-full">
                                        <span class="icon">
                                            <LucideIcon CssClass="has-text-grey" Name="info" Size="20" />
                                        </span>
                                    </div>
                                </TriggerContent>
                                <TooltipContent>
                                    <div class="card p-3 content">
                                        <p>
                                            Any ingredients marked with a <span class="icon"><LucideIcon Name="asterisk" Size="20" CssClass="has-text-info" /></span> do not already exist
                                            and will be created when the recipe is saved.
                                        </p>
                                    </div>
                                </TooltipContent>
                            </Tooltip>
                        </div>

                        <!-- Mobile layout-->
                        <div class="is-hidden-tablet">
                            <div class="is-flex is-align-items-center mb-3">
                                <div class="field has-addons is-flex-grow-1 mb-0">
                                    <div class="control">
                                        <input 
                                            form="edit-recipe-add-ingredient-form"
                                            name="@nameof(RecipeIngredientModel.Quantity)"
                                            class="input unit-input" 
                                            type="number" 
                                            placeholder="1" 
                                            step="any" >
                                    </div>
                                    <div class="control is-expanded">
                                        <input 
                                            _="on change set <#ingredients-list-item-template input[name='unit'] />'s value to my value"
                                            form="edit-recipe-add-ingredient-form"
                                            class="input" 
                                            type="text" 
                                            placeholder="cup" 
                                            name="@nameof(RecipeIngredientModel.Unit)">
                                    </div>
                                </div>
                                <div class="ml-2">
                                    <Tooltip Position="Tooltip.TooltipPosition.TopEnd" >
                                        <TriggerContent>
                                            <div class="is-flex is-align-items-center">
                                                <span class="icon">
                                                    <LucideIcon CssClass="has-text-grey" Name="info" Size="20" />
                                                </span>
                                            </div>
                                        </TriggerContent>
                                        <TooltipContent>
                                            <div class="card p-3 content">
                                                <p>
                                                    Any ingredients marked with a <span class="icon"><LucideIcon Name="asterisk" Size="20" CssClass="has-text-info" /></span> do not already exist
                                                    and will be created when the recipe is saved.
                                                </p>
                                            </div>
                                        </TooltipContent>
                                    </Tooltip>
                                </div>
                            </div>
                            <div class="field has-addons">
                                <div class="control is-expanded"
                                    _="on ingredientChanged
                                        halt the event
        
                                        if the event's detail.value is ''
                                        and the event's detail.text is not ''
                                            remove .is-hidden from the first .lucide in me
                                        else
                                            add .is-hidden to the first .lucide in me
                                        end
                                    end
                                    ">
                                    <Autocomplete 
                                        ValueName="@(nameof(RecipeIngredientModel.IngredientId))"
                                        Form="@("edit-recipe-add-ingredient-form")"
                                        Name="@("search")"
                                        Id="@("ingredient-search-mobile")"
                                        Placeholder="@("Flour")"
                                        SuggestionUri="@("/recipes/search-ingredients")"
                                        ChangedEvent="@("ingredientChanged")">
                                        <Icon>
                                            <LucideIcon CssClass="has-text-info is-hidden" Name="asterisk" Size="20" />
                                        </Icon>
                                    </Autocomplete>
                                </div>
                                <div class="control">
                                    <input 
                                        type="submit"
                                        form="edit-recipe-add-ingredient-form"
                                        class="button is-primary" 
                                         value="Add"/>
                                </div>
                            </div>
                        </div>
                    
                        <div id="ingredients-list" class="columns is-gapless">
                            <div class="column is-10 " 
                                _="on load[event.target==me]
                                    js(me)
                                        if (typeof Sortable !== 'undefined') {
                                            return new Sortable(me, {
                                                animation: 100,
                                                ghostClass: 'sortable-ghost',
                                                chosenClass: 'sortable-chosen',
                                                dragClass: 'sortable-drag',
                                                handle: '.drag-handle'
                                            });
                                        }
                                    end
                                    set :sortable to it
                                end

                                on htmx:beforeCleanupElement[event.target==me]
                                    set sortable to :sortable
                                    js(sortable)
                                        if (sortable) {
                                            sortable.destroy();
                                        }
                                    end
                                end">
                                @if(Recipe.HasValue)
                                {
                                    for(int i=0; i < Recipe.Value.Ingredients.Count; i++)
                                    {

                                        <RecipeIngredientsListItem 
                                            Ingredient="Recipe.Value.Ingredients[i]"
                                            GroupId="@i"/>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Instructions</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input type="hidden" name="@nameof(RecipeModel.Instructions)" id="instructions-input" value="@Recipe.Bind(r => r.Instructions).Unwrap()" />
                    <div class="is-flex is-flex-direction-column">
                        <div 
                            _="
                                on load[event.target==me]
                                    set storage to #instructions-input
                                    js(me, storage)
                                        const quill = new Quill(me, {
                                            theme: 'snow',
                                        });
                                        
                                        // Load initial content from model
                                        // var initialContent = document.getElementById('instructions-input').value;
                                        // if (initialContent) {
                                        //    quill.root.innerHTML = initialContent;
                                        // }
                                        
                                        // Sync content to hidden input on changes
                                        quill.on('text-change', function() {
                                            storage.value = quill.root.innerHTML;
                                        });
                                        
                                        return quill;
                                    end
                                    set :q to it
                                    set :q.root.innerHTML to #instructions-input's value
                                end
                                
                                on htmx:beforeCleanupElement[event.target==me]
                                    set q to :q
                                    if q is not null then
                                        js(q)
                                            // Quill doesn't have a proper destroy method
                                            // Best practice is to clear references and let DOM removal handle cleanup
                                            if (q.root) {
                                                q.root.innerHTML = '';
                                            }
                                        end
                                        set :q to null
                                    end
                                end
                            "
                        ></div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    
    <div class="field is-horizontal mt-5">
        <div class="field-label is-normal"></div>
        <div class="field-body">
            <div class="field">
                <div class="control">
                    @if(RecipeId.HasValue) {
                        <div class="is-flex is-justify-content-space-between mb-3">
                            <button
                                class="button is-primary"
                                type="submit"
                                form="edit-recipe-form"
                            >
                                Save
                            </button>
                            <button
                                hx-get="/recipes/view/@RecipeId.Value"
                                hx-push-url="/recipes/view/@RecipeId.Value"
                                hx-swap="innerHTML"
                                hx-target="#page-container"
                                class="button is-danger"
                            >
                                Cancel
                            </button>
                        </div>
                    }
                    else {
                        <div class="is-flex is-justify-content-space-between mb-3">
                            <button
                                class="button is-primary"
                                type="submit"
                                form="edit-recipe-form"
                            >
                                Save
                            </button>
                            <button
                                hx-get="/recipes"
                                hx-push-url="/recipes"
                                hx-swap="innerHTML"
                                hx-target="#page-container"
                                class="button is-danger"
                            >
                                Cancel
                            </button>
                        </div>
                        <div>
                            <button
                                class="button is-primary"
                                hx-include="#edit-recipe-form"
                                hx-swap="none"
                                hx-post="/recipes/new"
                                hx-vals='{"createAnother": "true"}'
                            >
                                Save & create another
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

</div>
