@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public Optional<string> Name { get; set; }
    [Parameter]
    public Optional<string> Id { get; set; }
    private Dictionary<string, object> _containerAttributes = [];

    protected override void OnInitialized()
    {
        if (Id.HasValue)
            _containerAttributes["id"] = Id.Value;
        base.OnInitialized();
    }
}

<div @attributes="_containerAttributes">
    <div>
        <input class="input mb-4 has-text-primary" type="text" placeholder="Snack" value="@Name.Unwrap()" required />
    </div>

    <div class="meal-plan-item-container mb-4 is-flex is-flex-direction-column gap-2"
        _="
            on load[event.target==me]
                js(me)
                    return new Sortable(me, {
                        group: {
                            name: 'shared',
                        },
                        animation: 100,
                        ghostClass: 'sortable-ghost',
                        chosenClass: 'sortable-chosen',
                        dragClass: 'sortable-drag',
                        handle: '.drag-container'
                    });
                end
                set :sortable to it
            end

            on destroy[event.target==me]
                set sortable to :sortable
                js(sortable)
                    if (sortable) {
                        sortable.destroy();
                    }
                end
                remove me
            end

            on htmx:beforeCleanupElement[event.target==me]
                send destroy to me
            end
        ">
        @ChildContent
    </div>
</div>
