@using Hestia.Domain.Models
@using Hestia.Domain.Services
@inject INutritionLabelProcessingStateService StateService

@code {
    [Parameter, EditorRequired]
    public required Guid ProcessingId { get; set; }

    private Result<Union<string, DetailedResult<ScannedNutritionLabel, string>>> _result = default!;
    private Dictionary<string, object> _attributes = [];

    protected override void OnInitialized()
    {
        _result = StateService.GetProcessingResult(ProcessingId);
        if (_result.IsSuccessful && _result.Value.Is<string>(out _))
            _attributes["hx-trigger"] = "load delay:500ms";
        base.OnInitialized();
    }

}

<div 
    id="scan-nutrition-label-state"
    @attributes="_attributes"
    hx-get="/ingredients/scan-nutrition-label/status/@ProcessingId"
    hx-swap="outerHTML">
    @if(!_result.TryGetValue(out var union))
    {
        <p>Processing session expired or not found. Please try again.</p>
    }
    else if (union.Is<string>(out var status))
    {

        <p>@status</p>
    }
    else 
    {
        var detailedResult = union.Cast<DetailedResult<ScannedNutritionLabel, string>>();

        if (detailedResult.TryGetReason(out var reason))
        {
            <p class="has-text-danger">@reason</p>
        }
        else 
        {
            var scannedLabel = detailedResult.Value!;

            <div class="notification is-success">
                <p><strong>âœ… Nutrition Label Scanned Successfully!</strong></p>
                <p><small>Processing completed in @(scannedLabel.ProcessingDuration.TotalMilliseconds.ToString("N0"))ms</small></p>
                
                <div class="columns mt-4">
                    <div class="column">
                        @if (scannedLabel.ServingSizeQuantity.TryGetValue(out var servingSizeQuantity))
                        {
                            <input value="@servingSizeQuantity" type="hidden" name="@nameof(IngredientModel.ServingSizeQuantity)" />
                            <p><strong>Serving Size:</strong> @servingSizeQuantity @(scannedLabel.ServingSizeUnit.Unwrap())</p>
                        }
                        @if (scannedLabel.AlternateServingSizeQuantity.TryGetValue(out var altServingSizeQuantity))
                        {
                            <input value="@altServingSizeQuantity" type="hidden" name="@nameof(IngredientModel.AlternateServingSizeQuantity)" />
                            <p><strong>Alternate Serving:</strong> @altServingSizeQuantity @(scannedLabel.AlternateServingSizeUnit.Unwrap())</p>
                        }
                        @if (scannedLabel.Calories.TryGetValue(out var calories))
                        {
                            <input value="@calories" type="hidden" name="@nameof(IngredientModel.Calories)" />
                            <p><strong>Calories:</strong> @calories</p>
                        }
                    </div>
                    <div class="column">
                        @if (scannedLabel.CarbohydrateGrams.TryGetValue(out var carbs))
                        {
                            <input value="@carbs" type="hidden" name="@nameof(IngredientModel.CarbGrams)" />
                            <p><strong>Carbohydrates:</strong> @carbs g</p>
                        }
                        @if (scannedLabel.FatGrams.TryGetValue(out var fat))
                        {
                            <input value="@fat" type="hidden" name="@nameof(IngredientModel.FatGrams)" />
                            <p><strong>Fat:</strong> @fat g</p>
                        }
                        @if (scannedLabel.ProteinGrams.TryGetValue(out var protein))
                        {
                            <input value="@protein" type="hidden" name="@nameof(IngredientModel.ProteinGrams)" />
                            <p><strong>Protein:</strong> @protein g</p>
                        }
                        @if (scannedLabel.FibreGrams.TryGetValue(out var fibre))
                        {
                            <p><strong>Fibre:</strong> @fibre g</p>
                        }
                        @if (scannedLabel.SodiumGrams.TryGetValue(out var sodium))
                        {
                            <p><strong>Sodium:</strong> @sodium g</p>
                        }
                    </div>
                </div>
            </div>
        }
    }

</div>