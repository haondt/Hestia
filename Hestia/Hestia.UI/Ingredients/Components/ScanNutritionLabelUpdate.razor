@using Hestia.Domain.Models
@using Hestia.Domain.Services
@inject INutritionLabelProcessingStateService StateService

@code {
    [Parameter, EditorRequired]
    public required Guid ProcessingId { get; set; }

    private Result<Union<string, DetailedResult<ScannedNutritionLabel, string>>> _result = default!;
    private Dictionary<string, object> _attributes = [];

    protected override void OnInitialized()
    {
        _result = StateService.GetProcessingResult(ProcessingId);
        if (_result.IsSuccessful && _result.Value.Is<string>(out _))
            _attributes["hx-trigger"] = "load delay:500ms";
        base.OnInitialized();
    }

}

<div 
    id="scan-nutrition-label-state"
    @attributes="_attributes"
    hx-get="/ingredients/scan-nutrition-label/status/@ProcessingId"
    hx-swap="outerHTML">
    @if(!_result.TryGetValue(out var union))
    {
        <p>Processing session expired or not found. Please try again.</p>
    }
    else if (union.Is<string>(out var status))
    {

        <p>@status</p>
    }
    else 
    {
        var detailedResult = union.Cast<DetailedResult<ScannedNutritionLabel, string>>();

        if (detailedResult.TryGetReason(out var reason))
        {
            <p class="has-text-danger">@reason</p>
        }
        else 
        {
            var scannedLabel = detailedResult.Value!; 

            @if (scannedLabel.ServingSizeQuantity.TryGetValue(out var servingSizeQuantity))
            {
                <input value="@servingSizeQuantity" type="hidden" name="@nameof(IngredientModel.ServingSizeQuantity)" />
                <p><strong>Serving Size Quantity</strong></p>
                <p>@servingSizeQuantity</p>
            }
        }
    }

</div>