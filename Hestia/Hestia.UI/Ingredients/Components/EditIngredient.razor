@using Hestia.Domain.Models
@using Hestia.Domain.Services
@using Hestia.UI.Core.Components
@using Hestia.UI.Core.Extensions
@using System.Text.Json

@attribute [RenderPage]
@inject IUnitConversionsService UnitConversionsService
<div _="on load send OnNavigate(value:'NoNavigation') to #navbar then remove me"></div>

@code {
    public const string UnitIncompatibilityMessage = "Cannot convert between serving size and package size units.";

    [Parameter]
    public Optional<IngredientModel> Ingredient { get; set; }

    [Parameter]
    public Optional<int> IngredientId { get; set; }

    private Dictionary<string, object> _submitAttributes = new();

    private List<string> _warningTooltipIds = [];
    private bool _areUnitsCompatible = true;

    protected override async Task OnInitializedAsync()
    {
        if (IngredientId.TryGetValue(out var id))
            _submitAttributes["hx-put"] =    $"/ingredients/edit/{id}";
        else
            _submitAttributes["hx-post"] = "/ingredients/new";

        for(int i=0; i< 3;i++)
            _warningTooltipIds.Add(Guid.NewGuid().ToString("N"));

        _areUnitsCompatible = true;
        if (Ingredient.TryGetValue(out var ingredient))
            _areUnitsCompatible = await UnitConversionsService.CheckIngredientUnitCompatibilityAsync(ingredient, true);

        base.OnInitialized();
    }

    private bool AreUnitsCompatible()
    {

        if (
            !Ingredient.Bind(q => q.ServingSizeUnit).Map(u => u.ToLowerInvariant()).TryGetValue(out var servingUnit) ||
            !Ingredient.Bind(q => q.PackageSizeUnit).Map(u => u.ToLowerInvariant()).TryGetValue(out var packageUnit))
            return true;

        if (servingUnit == packageUnit)
            return true;

        if ((servingUnit == "ml" && packageUnit == "l") || (servingUnit == "l" && packageUnit == "ml"))
            return true;

        return false;
    }
}

<div class="content-container mt-5">
    <div class="page-header">
        <p>@Ingredient.Map(_ => "Edit").Or("New") ingredient</p>
    </div>
    
    <div class="mb-5">
        <form
            id="scan-nutrition-form" enctype="multipart/form-data" hx-post="/ingredients/scan-nutrition-label" hx-swap="none"
            _="
                on innerSubmit
                    send submit to me
                    reset() me
                end
              ">
            <input type="file" class="is-hidden" id="nutrition-image" name="image" accept="image/*" capture="environment" _="on change send innerSubmit to the closest <form />" />
            <label for="nutrition-image" type="button" class="button is-success is-large is-fullwidth">
                ðŸ“· Scan Nutrition Label
            </label>
        </form>
    </div>

    <form id="edit-ingredient-form" class="control">

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Name</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(IngredientModel.Name)" type="text" placeholder="3.25% Homogenized Milk" value="@Ingredient.Map(q => q.Name).Unwrap()" required/>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Brand</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(IngredientModel.Brand)" type="text" placeholder="Beatrice" value="@Ingredient.Bind(q => q.Brand).Unwrap()" />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Vendor</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(IngredientModel.Vendor)" type="text" placeholder="Superstore" value="@Ingredient.Bind(q => q.Vendor).Unwrap()" />
                </div>
            </div>
        </div>

        <hr />

        <div class="is-hidden"
            hx-swap="none"
            hx-trigger="input from:.unit-input delay:200ms"
            hx-get="/utils/check-unit-compatibility"
            hx-sync="this:replace"
            hx-include=".unit-input"
            hx-rename="@nameof(IngredientModel.ServingSizeUnit):from,@nameof(IngredientModel.AlternateServingSizeUnit):from,@nameof(IngredientModel.PackageSizeUnit):to"
            hx-vals='@JsonSerializer.Serialize(new {
                @default = true,
                swap = _warningTooltipIds,
                message = UnitIncompatibilityMessage
            })'
            ></div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Serving size</label>
            </div>
            <div class="field-body">
                <div class="field has-addons is-flex-grow-0">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.ServingSizeQuantity)" type="number" placeholder="1" value="@Ingredient.Bind(q => q.ServingSizeQuantity).Unwrap()"></div>
                    <div class="control"><input class="input unit-input" name="@nameof(IngredientModel.ServingSizeUnit)" type="text" placeholder="cup" value="@Ingredient.Bind(q => q.ServingSizeUnit).Unwrap()"></div>
                    <FieldWarningTooltip
                        IsVisible="@(!_areUnitsCompatible)"
                        Id="@_warningTooltipIds[0]" Message="@UnitIncompatibilityMessage" />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Alternate serving size</label>
            </div>
            <div class="field-body">
                <div class="field has-addons is-flex-grow-0">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.AlternateServingSizeQuantity)" type="number" placeholder="250" value="@Ingredient.Bind(q => q.AlternateServingSizeQuantity).Unwrap()"></div>
                    <div class="control"><input class="input unit-input" name="@nameof(IngredientModel.AlternateServingSizeUnit)" type="text" placeholder="mL" value="@Ingredient.Bind(q => q.AlternateServingSizeUnit).Unwrap()"></div>
                    <FieldWarningTooltip
                        IsVisible="@(!_areUnitsCompatible)"
                        Id="@_warningTooltipIds[1]" Message="@UnitIncompatibilityMessage" />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Calories</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.Calories)" type="number" placeholder="160" value="@Ingredient.Bind(q => q.Calories).Unwrap()"></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Fat</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.FatGrams)" type="number" placeholder="8" value="@Ingredient.Bind(q => q.FatGrams).Unwrap()"></div>
                    <div class="control"><p class="button is-static">g</p></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Carbs</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.CarbGrams)" type="number" placeholder="12" value="@Ingredient.Bind(q => q.CarbGrams).Unwrap()"></div>
                    <div class="control"><p class="button is-static">g</p></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Protein</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.ProteinGrams)" type="number" placeholder="9" value="@Ingredient.Bind(q => q.ProteinGrams).Unwrap()"></div>
                    <div class="control"><p class="button is-static">g</p></div>
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">
                    Package size
                </label>
            </div>
            <div class="field-body">
                <div class="field has-addons ">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.PackageSizeQuantity)" type="number" placeholder="4" value="@Ingredient.Bind(q => q.PackageSizeQuantity).Unwrap()"></div>
                    <div class="control"><input class="input unit-input" name="@nameof(IngredientModel.PackageSizeUnit)" type="text" placeholder="L" value="@Ingredient.Bind(q => q.PackageSizeUnit).Unwrap()"></div>
                    <FieldWarningTooltip
                        IsVisible="@(!_areUnitsCompatible)"
                        Id="@_warningTooltipIds[2]" Message="@UnitIncompatibilityMessage" />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Package price</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.PackageCostDollars)" type="number" placeholder="5.25" value="@Ingredient.Bind(q => q.PackageCostDollars).Unwrap()"></div>
                    <div class="control"><p class="button is-static">$</p></div>
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Notes</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <textarea class="textarea" name="@nameof(IngredientModel.Notes)" type="text" value="@Ingredient.Map(q => q.Notes).Unwrap()" />
                </div>
            </div>
        </div>


    </form>
        <div class="field is-horizontal mt-5">
            <div class="field-label is-normal"></div>
            <div class="field-body">
                <div class="field">
                    <div class="control">
                        @if(IngredientId.HasValue) {
                            <div class="is-flex is-justify-content-space-between mb-3">
                                <button
                                    class="button is-primary"
                                    hx-include="#edit-ingredient-form"
                                    hx-swap="none" @attributes="_submitAttributes"
                                >
                                    Save
                                </button>
                                <button
                                    hx-get="/ingredients/view/@IngredientId.Value"
                                    hx-push-url="/ingredients/view/@IngredientId.Value"
                                    hx-swap="innerHTML"
                                    hx-target="#page-container"
                                    class="button is-danger"
                                >
                                    Cancel
                                </button>
                            </div>
                        }
                        else{
                            <div class="is-flex is-justify-content-space-between mb-3">
                                <button
                                    class="button is-primary"
                                    hx-include="#edit-ingredient-form"
                                    hx-swap="none" @attributes="_submitAttributes"
                                >
                                    Save
                                </button>
                                <button
                                    hx-get="/ingredients"
                                    hx-push-url="/ingredients"
                                    hx-swap="innerHTML"
                                    hx-target="#page-container"
                                    class="button is-danger"
                                >
                                    Cancel
                                </button>
                            </div>
                            <div>
                                <button
                                    class="button is-primary"
                                    hx-include="#edit-ingredient-form"
                                    hx-swap="none" @attributes="_submitAttributes"
                                    hx-vals='{"createAnother": "true"}'
                                >
                                    Save & create another
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

</div>
