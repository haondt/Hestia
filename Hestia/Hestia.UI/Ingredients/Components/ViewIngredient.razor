@using Hestia.Domain.Models
@using Hestia.Domain.Services
@using Hestia.UI.Library.Components.Element
@attribute [RenderPage]

@inject IUnitConversionsService UnitConversionsService
<div _="on load send OnNavigate(value:'NoNavigation') to #navbar then remove me"></div>

@code {
    [Parameter, EditorRequired]
    public required IngredientModel Ingredient { get; set; }

    [Parameter, EditorRequired]
    public required int IngredientId { get; set; }

    private IngredientInsightsModel _insights = default!;

    protected override async Task OnInitializedAsync()
    {
        _insights = await Ingredient.GetInsightsAsync(UnitConversionsService);
    }
}

<div class="content-container mt-5">
    <div class="is-flex is-flex-direction-row is-fullwidth gap-4">
        <div class="tabs is-flex-grow-1">
            <ul 
                _="
                    on setActive
                        halt the event
                        if :active is not null
                            remove .is-active from the :active's parentElement
                            add .is-hidden to :activeBody
                        end

                        set :active to the event's srcElement
                        set :activeBody to #{:active's @@data-body-id}
                        add .is-active to the :active's parentElement
                        remove .is-hidden from :activeBody
                    end
                "
            >
                <li>
                    <a _="on load send setActive end on click send setActive end"
                        data-body-id="ingredient-tab-body"
                    >
                        Ingredient
                    </a>
                </li>
                <li>
                    <a _="on click send setActive end"
                        data-body-id="insights-tab-body"
                    >
                        Insights
                    </a>
                </li>
            </ul>
        </div>
        <div >
            <button
                hx-get="/ingredients/edit/@IngredientId"
                hx-push-url="/ingredients/edit/@IngredientId"
                hx-swap="innerHTML"
                hx-target="#page-container"
                class="button is-primary"
            >
                Edit
            </button>
        </div>
    </div>
    <div id="ingredient-tab-body" class="is-hidden">
        <form id="view-recipe-form" class="control" >

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Name</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(IngredientModel.Name)" type="text" value="@Ingredient.Name" readonly/>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Brand</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(IngredientModel.Brand)" type="text" value="@Ingredient.Brand.Unwrap()" readonly />
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Vendor</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <input class="input" name="@nameof(IngredientModel.Vendor)" type="text" value="@Ingredient.Vendor.Unwrap()" readonly />
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Serving size</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.ServingSizeQuantity)" type="number" value="@Ingredient.ServingSizeQuantity.Unwrap()" readonly></div>
                    <div class="control"><input class="input unit-input" name="@nameof(IngredientModel.ServingSizeUnit)" type="text" value="@Ingredient.ServingSizeUnit.Unwrap()" readonly></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Alternate Serving size</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.AlternateServingSizeQuantity)" type="number" value="@Ingredient.AlternateServingSizeQuantity.Unwrap()" readonly></div>
                    <div class="control"><input class="input unit-input" name="@nameof(IngredientModel.AlternateServingSizeUnit)" type="text" value="@Ingredient.AlternateServingSizeUnit.Unwrap()" readonly></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Calories</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.Calories)" type="number" value="@Ingredient.Calories.Unwrap()" readonly></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Fat</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.FatGrams)" type="number" value="@Ingredient.FatGrams.Unwrap()" readonly></div>
                    <div class="control"><p class="button is-static">g</p></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Carbs</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.CarbGrams)" type="number" value="@Ingredient.CarbGrams.Unwrap()" readonly></div>
                    <div class="control"><p class="button is-static">g</p></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Protein</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.ProteinGrams)" type="number" value="@Ingredient.ProteinGrams.Unwrap()" readonly></div>
                    <div class="control"><p class="button is-static">g</p></div>
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Package size</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.PackageSizeQuantity)" type="number" value="@Ingredient.PackageSizeQuantity.Unwrap()" readonly></div>
                    <div class="control"><input class="input unit-input" name="@nameof(IngredientModel.PackageSizeUnit)" type="text" value="@Ingredient.PackageSizeUnit.Unwrap()" readonly></div>
                </div>
            </div>
        </div>

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Package price</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control"><input class="input" name="@nameof(IngredientModel.PackageCostDollars)" type="number" value="@Ingredient.PackageCostDollars.Unwrap()" readonly></div>
                    <div class="control"><p class="button is-static">$</p></div>
                </div>
            </div>
        </div>

        <hr />

        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Notes</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <textarea class="textarea" name="@nameof(IngredientModel.Notes)" type="text" value="@Ingredient.Notes" readonly />
                </div>
            </div>
        </div>


    </form>
    </div>

    <div id="insights-tab-body" class="is-hidden">
        <div class="grid is-col-min-12 is-column-gap-4 is-row-gap-4">
            <div class="cell">
                <p class="section-label">Macro breakdown</p>
                @if (_insights.MacroNutrientBreakdown.TryGetValue(out var macroNutrientBreakdown))
                {
                    <div class="is-flex is-flex-direction-column">
                        <div class="fixed-grid has-3-cols">
                            <div class="grid" style="grid-template-columns: max-content 1fr max-content;">
                                @foreach(var (name, fill) in new List<(string, double)>
                                {
                                    ("Protein", macroNutrientBreakdown.ProportionProtein),
                                    ("Fat", macroNutrientBreakdown.ProportionFat),
                                    ("Carbs", macroNutrientBreakdown.ProportionCarbs)
                                })
                                {
                                    <div class="cell">
                                        <p>@name</p>
                                    </div>
                                    <div class="cell">
                                         <Progress Percentage="@fill"></Progress>
                                    </div>
                                    <div class="cell">
                                        <p>@fill.ToString("P0")</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p class="has-text-grey">Insufficient data for macro breakdown</p>
                }
            </div>
            
            <div class="cell">
                <p class="section-label">Macro efficiency</p>
                @{
                    var hasAnyMacroEfficiency = _insights.MacroEfficiency.ProteinPerDollar.HasValue 
                        || _insights.MacroEfficiency.FatPerDollar.HasValue 
                        || _insights.MacroEfficiency.CarbsPerDollar.HasValue
                        || _insights.MacroEfficiency.ProteinPerCalorie.HasValue
                        || _insights.MacroEfficiency.FatPerCalorie.HasValue
                        || _insights.MacroEfficiency.CarbsPerCalorie.HasValue;
                }
                @if (hasAnyMacroEfficiency)
                {
                    <div class="is-grid is-fullwidth" style="grid-template-columns: 1fr 1fr 1fr; gap: 0.5rem 1rem;">
                        <div>Protein</div>
                        <div>@(_insights.MacroEfficiency.ProteinPerDollar.TryGetValue(out var proteinPerDollar) ? $"{proteinPerDollar:F2} g/$" : "—")</div>
                        <div>@(_insights.MacroEfficiency.ProteinPerCalorie.TryGetValue(out var proteinPerCalorie) ? $"{proteinPerCalorie * 1000:F0} mg/cal" : "—")</div>

                        <div>Fat</div>
                        <div>@(_insights.MacroEfficiency.FatPerDollar.TryGetValue(out var fatPerDollar) ? $"{fatPerDollar:F2} g/$" : "—")</div>
                        <div>@(_insights.MacroEfficiency.FatPerCalorie.TryGetValue(out var fatPerCalorie) ? $"{fatPerCalorie * 1000:F0} mg/cal" : "—")</div>

                        <div>Carbs</div>
                        <div>@(_insights.MacroEfficiency.CarbsPerDollar.TryGetValue(out var carbsPerDollar) ? $"{carbsPerDollar:F2} g/$" : "—")</div>
                        <div>@(_insights.MacroEfficiency.CarbsPerCalorie.TryGetValue(out var carbsPerCalorie) ? $"{carbsPerCalorie * 1000:F0} mg/cal" : "—")</div>
                    </div>
                }
                else
                {
                    <p class="has-text-grey">Insufficient data for macro efficiency analysis</p>
                }
            </div>
            <div class="cell">
                <p class="section-label">Cost analysis</p>
                @{
                    var hasAnyCostAnalysis = _insights.CostAnalysis.ServingsPerPackage.HasValue 
                        || _insights.CostAnalysis.CostPerServing.HasValue 
                        || _insights.CostAnalysis.CaloriesPerDollar.HasValue;
                }
                @if (hasAnyCostAnalysis)
                {
                    <div class="is-flex is-flex-direction-column gap-2">
                        @if (_insights.CostAnalysis.ServingsPerPackage.TryGetValue(out var servingsPerPackage))
                        {
                            <div class="is-flex is-justify-content-space-between">
                                <span>Servings per package:</span>
                                <span class="has-text-weight-semibold">@servingsPerPackage.ToString("F1")</span>
                            </div>
                        }
                        @if (_insights.CostAnalysis.CostPerServing.TryGetValue(out var costPerServing))
                        {
                            <div class="is-flex is-justify-content-space-between">
                                <span>Cost per serving:</span>
                                <span class="has-text-weight-semibold">$@costPerServing.ToString("F2")</span>
                            </div>
                        }
                        @if (_insights.CostAnalysis.CaloriesPerDollar.TryGetValue(out var caloriesPerDollar))
                        {
                            <div class="is-flex is-justify-content-space-between">
                                <span>Calories per dollar:</span>
                                <span class="has-text-weight-semibold">@caloriesPerDollar.ToString("F0")</span>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="has-text-grey">Insufficient data for cost analysis</p>
                }
            </div>
            <div class="cell">
                <p class="section-label">Protein score</p>
                @if (_insights.ProteinScore.TryGetValue(out var proteinScore))
                {
                    <div class="has-text-centered">
                        <p class="title is-2 has-text-primary">@proteinScore.ToString("F2")</p>
                        <p class="subtitle is-6">Protein efficiency rating</p>
                    </div>
                }
                else
                {
                    <p class="has-text-grey">Insufficient data for protein score</p>
                }
            </div>
        </div>
    </div>
</div>
