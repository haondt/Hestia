@code {
    public enum TooltipPosition
    {
        Top,
        TopStart,
        TopEnd,
        Right,
        RightStart,
        RightEnd,
        Bottom,
        BottomStart,
        BottomEnd,
        Left,
        LeftStart,
        LeftEnd
    }

    [Parameter] public RenderFragment? TriggerContent { get; set; }
    [Parameter] public Optional<string> TriggerClasses { get; set; } 
    [Parameter] public Optional<string> ContainerId { get; set; } 
    [Parameter] public Optional<string> ContainerClasses { get; set; } 
    [Parameter] public RenderFragment? TooltipContent { get; set; }
    [Parameter] public TooltipPosition Position { get; set; } = TooltipPosition.Top;
    [Parameter] public int Offset { get; set; } = 10;
    [Parameter] public Optional<string> HxSwapOob { get; set; }
    [Parameter] public bool Debug { get; set; }
    [Parameter] public Optional<double> MaxWidth { get; set; }
    [Parameter] public bool Hover { get; set; } = true;

    private Dictionary<string, object> _containerAttributes = [];

    protected override void OnInitialized()
    {
        if (ContainerId.HasValue)
            _containerAttributes["id"] = ContainerId.Value;
        if (HxSwapOob.HasValue)
            _containerAttributes["hx-swap-oob"] = HxSwapOob.Value;
    }

    private string GetPositionString() => Position switch
    {
        TooltipPosition.Top => "top",
        TooltipPosition.TopStart => "top-start",
        TooltipPosition.TopEnd => "top-end",
        TooltipPosition.Right => "right",
        TooltipPosition.RightStart => "right-start",
        TooltipPosition.RightEnd => "right-end",
        TooltipPosition.Bottom => "bottom",
        TooltipPosition.BottomStart => "bottom-start",
        TooltipPosition.BottomEnd => "bottom-end",
        TooltipPosition.Left => "left",
        TooltipPosition.LeftStart => "left-start",
        TooltipPosition.LeftEnd => "left-end",
        _ => "top"
    };
}
@if (Debug)
{
<div class="tooltip is-flex @ContainerClasses.Unwrap()" @attributes="_containerAttributes">
    <span class="tooltip-trigger @TriggerClasses.Unwrap()" 
        _="
            on load
                set tooltip to the next .tooltip-body
                js(me, tooltip)
                    return HestiaUI.autoPositionTooltip({ 
                        trigger: me, 
                        tooltip: tooltip, 
                        position: '@GetPositionString()', 
                        offset: @Offset,
                        padding: 15,
                        maxWidth: @MaxWidth.Map(q => q.ToString()).Or("null")
                    });
                end
                set :cleanup to it
            end
            on htmx:beforeCleanupElement
                set cleanup to :cleanup
                js(cleanup)
                    cleanup();
                end
            end
        "
    >
        @TriggerContent
    </span>
    <div class="tooltip-body">
        @TooltipContent
    </div>
</div> 
}
else
{

<div class="tooltip is-flex @ContainerClasses.Unwrap()" @attributes="_containerAttributes">
    <span class="tooltip-trigger @TriggerClasses.Unwrap()" 
        _="
            on showTooltip
                halt the event
                if not :cleanup
                    set tooltip to the next .tooltip-body
                    toggle .is-hidden on tooltip
                    js(me, tooltip)
                        return HestiaUI.autoPositionTooltip({ 
                            trigger: me, 
                            tooltip: tooltip, 
                            position: '@GetPositionString()', 
                            offset: @Offset,
                            padding: 15,
                            maxWidth: @MaxWidth.Map(q => q.ToString()).Or("null")
                        });
                    end
                    set :cleanup to it
                end
            end
            on hideTooltip
                halt the event
                if :cleanup
                    set cleanup to :cleanup
                    js(cleanup)
                        cleanup();
                    end
                    set tooltip to the next .tooltip-body
                    toggle .is-hidden on tooltip
                    set :cleanup to null
                end
            end

            on htmx:beforeCleanupElement send hideTooltip to me end
            @(Hover ? @"
                on mouseleave send hideTooltip to me end
                on blur send hideTooltip to me end

                on mouseenter send showTooltip to me end
                on focus send showTooltip to me end
            ".Trim() : "")
        "
    >
        @TriggerContent
    </span>
    <div class="tooltip-body is-hidden">
        @TooltipContent
    </div>
</div> 
}
